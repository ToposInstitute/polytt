def id : (A : Type) → A → A :=
  λ A x → x

def const : (A : Type) → (B : Type) → A → B → A :=
  λ _ _ x _ → x

def four : ℕ := 4

def double : ℕ → ℕ :=
  λ n → elim (λ _ → ℕ) 0 (λ _ → λ n → succ (succ n)) n

def add : ℕ → ℕ → ℕ :=
  λ m n → elim (λ _ → ℕ) n (λ _ n → succ n) m

def sigma : (A : Type) → (A → Type) → Type :=
  λ A → λ B → (x : A) × B x

def pair : ℕ → ℕ → (_ : ℕ) × ℕ :=
  λ n m → (n , m : ℕ)

def projl : (ℕ × ℕ) → ℕ :=
  λ x → fst x

def Bool := #{ .true, .false }

def Unit := (t : #{}) -> ({} : #{} -> Type) t

def unit : Unit := {}

def ARecord := { .true : ℕ, .false : Bool }

def record_lit : ARecord := { .true = 0, .false = .true }

def Anything := (T : Type) * T

def let-example :=
  let n = 5 : ℕ
  in n

#normalize let-example

def nyan : Poly :=
  (ℕ × ℕ)

def tensor : Poly → Poly → Poly :=
  λ P Q → (pq : base P × base Q) × (fib P (fst pq) × fib Q (snd pq))

#normalize base (tensor nyan nyan)
#normalize fib (tensor nyan nyan) (1 , 2)