def id : (A : Type) → A → A :=
  λ A x → x

#print id

def const : (A : Type) → (B : Type) → A → B → A :=
  λ _ _ x _ → x

def four : ℕ := 4

def double : ℕ → ℕ :=
  λ n → elim (λ _ → ℕ) ? (λ _ → λ n → succ (succ n)) n

def sigma : (A : Type) → (A → Type) → Type :=
  λ A → λ B → (x : A) × B x

def pair : ℕ → ℕ → (_ : ℕ) × ℕ :=
  λ n m → (n , m : ℕ)

def projl : (ℕ × ℕ) → ℕ :=
  λ x → fst x

#normalize double 4

#print ((ℕ × ℕ) → ℕ : Type)
#print (ℕ × (ℕ → ℕ) : Type)

def Bool : Type := #{ true, false }

def Record : Type := { true : ℕ, false : Bool }

def record_lit : Record := { true = 0, false = .true }

def Anything : Type := (T : Type) * T

#normalize (Record , record_lit : Record) : Anything

#normalize record_lit .true
#normalize record_lit .false
