def id : (A : type) → A → A :=
  λ A x → x

#print id

def const : (A : type) → (B : type) → A → B → A :=
  λ _ _ x _ → x

def four : ℕ := 4

def double : ℕ → ℕ :=
  λ n → elim (λ _ → ℕ) zero (λ _ → λ n → succ (succ n)) n

def sigma : (A : type) → (A → type) → type :=
  λ A → λ B → (x : A) × B x

def pair : ℕ → ℕ → (_ : ℕ) × ℕ :=
  λ n m → (n , m)

def p : poly :=
  (ℕ, λ _ → ℕ)

def projl : (ℕ × ℕ) → ℕ :=
  λ x → fst x

#normalize double 1000

def nyan : poly :=
  (ℕ , λ _ → ℕ)

-- #normalize base (nyan ⊗ (nyan ◁ (nyan ⌢[ id ℕ ] nyan))) 

#normalize base (nyan ⌢[ id ℕ ] nyan)
#normalize base (nyan ◁ nyan)
#normalize base (nyan ⊗ nyan)
#normalize fib (nyan ◁ nyan) (2 , λ _ → 3)
#normalize fib (nyan ⌢[ id ℕ ] nyan) (2 , 3)