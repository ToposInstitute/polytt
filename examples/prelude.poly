
def id : (A : type) → A → A :=
  λ A x → x

def const : (A : type) → (B : type) → A → B → A :=
  λ _ _ x _ → x

def four : ℕ := 4

def double : ℕ → ℕ :=
  λ n → elim (λ _ → ℕ) zero (λ _ → λ n → succ (succ n)) n

def sigma : (A : type) → (A → type) → type :=
  λ A → λ B → (x : A) × B x

-- sigma : (A : type) → (A → type) → type :=
--   λ A → λ B → (x : A) × (λ _ → B _) x

-- This is a comment
def pair : ℕ → ℕ → (_ : ℕ) × ℕ :=
  λ n m → (n , m)

def projl : (ℕ × ℕ) → ℕ :=
  λ x → fst x