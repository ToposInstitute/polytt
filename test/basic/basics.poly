def id : Π (A : Type), A → A :=
  λ A x → x

def id_ : Π (A : Type), A → A :=
  λ A x → x

def const : Π (A B : Type), A → B → A :=
  λ _ _ x _ → x

def four : ℕ := 4

def double : ℕ → ℕ :=
  λ n → elim (λ _ → ℕ) 0 (λ _ → λ n → succ (succ n)) n

def add : ℕ → ℕ → ℕ :=
  λ m n → elim (λ _ → ℕ) n (λ _ n → succ n) m

def sigma : Π (A : Type), (A → Type) → Type :=
  λ A B → Σ (x : A), B x

def dup : Π (A : Type), A → (A × A) :=
  λ _ a → (a , a)

def pair : ℕ → ℕ → ℕ × ℕ :=
  λ n m → (n , m : ℕ)

def projl : (ℕ × ℕ) → ℕ :=
  λ (_ , x) → x

def Bool := #{ .true, .false }

def Unit := Π (t : #{}), ({} : #{} -> Type) t

def unit : Unit := {}

def ARecord := { .true : ℕ, .false : Bool }

def record_lit : ARecord := { .true = 0, .false = .true }

def Anything := Σ (T : Type), T

def let-example :=
  let n := 5 : ℕ
  in n

#normalize let-example

def nyan : Poly :=
  (ℕ × ℕ)

def tensor : Poly → Poly → Poly :=
  λ P Q → Σ ((p , q) : base P × base Q), fib P p × fib Q q

#print tensor
#normalize base (tensor nyan nyan)
#normalize fib (tensor nyan nyan) (1 , 2)


def id : Π (P : Poly), P ⇒ P :=
  λ P → λ a⁺ ⇜ a⁻ ⇝
    return a⁺ ⇜ a⁻

#print (λ P → P) : Poly → Poly

#print (λ P → λ a⁺ ⇜ a⁻ ⇝ return a⁺ ⇜ a⁻) : Π (P : Poly), P ⇒ P

def nyan-hom : ℕ → nyan ⇒ nyan :=
  λ n → λ a⁺ ⇜ a⁻ ⇝
    let (b⁺ ⇜ b⁻) := (id nyan) (a⁺ ⇜ a⁻);
    return n ⇜ (b⁻ ∘ succ ∘ succ)

#normalize nyan-hom 42 1

def nyan-hom2 : nyan ⇒ nyan :=
  λ a⁺ ⇜ a⁻ ⇝
    let (b⁺ ⇜ b⁻) := (nyan-hom 12) (a⁺ ⇜ a⁻);
    return b⁺ ⇜ b⁻

#normalize nyan-hom2 1

def compose : Π (P Q R : Poly), Q ⇒ R → P ⇒ Q → P ⇒ R :=
  λ P Q R f g → λ p⁺ ⇜ p⁻ ⇝
    let (q⁺ ⇜ q⁻) := g (p⁺ ⇜ p⁻);
    let (r⁺ ⇜ r⁻) := f (q⁺ ⇜ q⁻);
    return r⁺ ⇜ r⁻


-- 🐈🌈
#normalize compose nyan nyan nyan nyan-hom2 nyan-hom2 1

def counter : (ℕ × ℕ) ⇒ (ℕ × #{ .single }) :=
  λ n⁺ ⇜ n⁻ ⇝
    return n⁺ ⇜ λ⁻ (x : #{ .single }) → n⁻ ← succ n⁺; done

#normalize (const ℕ) ℕ

#normalize counter

def Moore : Type → Type → Type → Type :=
  λ S I O → (S × S) ⇒ (O × I)

def mds : Π (A B : Type), (A → B) → Moore B A B :=
  λ A B f → λ b⁺ ⇜ b⁻ ⇝
    return b⁺ ⇜ b⁻ ∘ f

def Gate : Type → Type → Type :=
  λ I O → Moore O I O

def test-pair : nyan ⇒ tensor nyan nyan :=
  λ n⁺ ⇜ n⁻ ⇝
    let (b⁺ ⇜ b⁻) := (nyan-hom 12) (n⁺ ⇜ n⁻);
    return (n⁺ , b⁺) ⇜ (! , b⁻ ∘ succ)

#normalize (test-pair 1)

def swap : Π (P Q : Poly), tensor P Q ⇒ tensor Q P :=
  λ P Q → λ (p⁺ , q⁺) ⇜ (p⁻ , q⁻) ⇝
    return (q⁺ , p⁺) ⇜ (q⁻ , p⁻)

-- λ (p⁺, q⁺) (p⁻, q⁻) ⇝ (q⁺ , p⁺) , (q⁻ , p⁻)

#normalize swap nyan nyan (1, 2)

def internal-hom : Poly → Poly → Poly :=
  λ P Q → Σ (f : P ⇒ Q), (Σ (p : base P), fib Q (fst (f p)))

    -- ? → (q⁻ ∘ (snd ((snd pf⁺) (fst pf⁺))));
    -- (fst pf⁺ , p⁻) ⤚ (snd pf⁺) → (q₁⁺ , q₁⁻);
    -- (fst pf⁺) → pb⁻;
    -- q₁⁺ ⇜ q₁⁻

--            |----------------------------------------------------------------------------------------|
--            |   -( fib P p⁺ )-[ p : P ]-( p⁺ : base P )-\                                            |
--            |                                            \-( pb⁻ : base P )-[ f : P=>Q ]-( f⁺ : _)   |
-- fib Q q⁺ *-|-----------------------------( fib Q (fst (f⁺ (borrow pb⁻))) )-[ f : P=>Q ]            -|- q⁺ : base Q
--            |----------------------------------------------------------------------------------------|

-- Π Σ Π Σ

-- λ a⁺ ⇜ a⁻ ⇝
--   p⁻ ← p⁺;
--   return (base f) a⁺ ⇜ λ r →
--     p⁻ ← p⁺;
--     a⁻ ← (fib b a⁺) r;
--     done

-- Ideal syntax:
--def eval (P Q : Poly) : tensor P (internal-hom P Q) ⇒ Q :=
--  -- These two lines are equivalent:
--  -- either we take one (tensored) box, and deconstruct its bases (p⁺ , f⁺) and fibers (p₁⁻ , (p₂⁻ , q⁻))
--  -- λ (p⁺ , f⁺) ⇜ (p₁⁻ , (p₂⁻ , q⁻)) ⇝
--  -- or we take two boxes (implicitly tensored), and deconstruct each base and fiber separately
--  λ (p⁺ ⇜ p₁⁻) (f⁺ ⇜ (p₂⁻ , q⁻)) ⇝
--    let (q⁺ , bwd) := f⁺ p⁺;
--    p₂⁻ ← p⁺;
--    return
--      q⁺ ⇜ λ⁻ (q : fib Q q⁺) →
--        q⁻ ← q;
--        p₁⁻ ← bwd q;
--        done

-- Π Σ
-- P => Q
-- mbase : base P -> base Q
-- mfib : (p : base P) -> fib Q (mbase p) -> fib P p
--
-- m : Π (p : base P), Σ (q : base Q), fib Q q -> fib P p
-- mbase = fst . m : base P -> base Q
-- snd : (xy : Σ (x : X), Y x) -> Y (fst xy)
-- mfib = snd . m : (p : base P) -> fib Q (fst (m p)) -> fib P p

#normalize (λ P Q → base (tensor P (internal-hom P Q))) : Poly → Poly → Type

def eval : Π (P Q : Poly), tensor P (internal-hom P Q) ⇒ Q :=
  λ P Q → λ (p⁺ , f⁺) ⇜ (qf⁻ , (p⁻ , q⁻)) ⇝
    let (q⁺ , qf⁺) := f⁺ p⁺;
    p⁻ ← p⁺;
    return q⁺ ⇜ λ⁻ (v : fib Q q⁺) →
      (qf⁻ , q⁻) ← (qf⁺ v , v);
      done

def compose : Poly → Poly → Poly :=
  λ P Q → Σ ((p , f) : Σ (p : base P), fib P p → base Q), Σ (i : fib P p), fib Q (f i)

def tensor-to-compose : Π (P Q : Poly), tensor P Q ⇒ compose P Q :=
  λ P Q → λ (p⁺ , q⁺) ⇜ pq⁻ ⇝
    return (p⁺ , λ _ → q⁺) ⇜ pq⁻

#normalize tensor-to-compose

def Lens : Π (S T A B : Type), Type := λ S T A B → { .get : S → A, .set : S → B → T }

def compose : Π (A B C : Type), (B → C) → (A → B) → A → C :=
  λ _ _ _ f g a → f (g a)

#normalize Lens
