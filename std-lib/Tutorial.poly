import Data::Polynomial
import Data::Polynomial::Machines
import Data::Natural

--------------------------------------------------------------------------------
-- *** WORK IN PROGRESS ***
--
-- This is an introductory tutorial assuming an understanding of MLTT
-- and some degree of exposure to Poly.

--------------------------------------------------------------------------------
-- | MLTT Syntax

-- PolyTT is a full Martin-Lof Type Theory with special primitives for
-- Polynomials.

-- | Naturals are defined recursively and implemented as a primitive:
def one : ℕ := 1
def two : ℕ := succ one

-- | Equality
def one≡one : one = 1 := refl

-- | Pi Types:
def id : Π (A : Type), A → A := λ A a -> a

-- | Sigma Types:
def Vec : Type → Type :=
  λ A → Σ(n : ℕ), fin n → A

-- | Finite Sets:
def RGB : Type := #{ .Red, .Green, .Blue }

-- | Finite Set case elimination:
def rgb-func : RGB → ℕ :=
  { .Red = 0
  , .Green = 1
  , .Blue = 2
  }

-- | Typeholes are defined with a question mark. Uncomment to test:
--
-- NOTE: In Poly-Lambdas typeholes are limited to positive positions.
-- def type-hole : ℕ := ?

--------------------------------------------------------------------------------
-- | Polynomials

-- Polynomials are encoded as Sigma types of the form:
--
-- (base : Type, fiber : base → Type)
--
-- Projection functions 'base' and 'fiber' are provided.

-- | P(y) ≔ y²
def P : Poly :=
  Σ(_ : Unit), y^(fin 2)

-- | Q(y) ≔ y³ + y²
def Q : Poly :=
  -- NOTE: We use FiniteSets rather then inductive 'Fin' here because
  -- elmination of 'Fin' is very painful at the moment.
  Σ(i : #{ .zero, .one }),
    y^(
      { .zero = fin 3
      , .one = fin 2
      } i
    )

-- R(y) ≔ y³ + y² + y + 1
--
-- R(y) ≔ Σ(i : Fin 4), y^(Fin 4)
def R : Poly :=
  Σ(i : #{ .zero, .one, .two, .three}),
    y^(
      { .zero = fin 3
      , .one = fin 2
      , .two = fin 1
      , .three = fin 0
      } i
    )

def Listₚ : Poly :=
  Σ(n : ℕ), y^(fin n)

-- | ℕy^ℕ
def nyan : Poly :=
  Σ(_ : ℕ), y^ℕ

-- | We can also define a non-dependent Poly using product shorthand
-- in place of Sigma:
def nyan' : Poly := ℕ × y^ℕ

-- | We can then prove their equivalence:
def sigma≡pair : nyan = nyan' := refl

-- | S × X⁰
def constant : Π(S : Type), Poly :=
  λ S → S × y^(fin 0)

--------------------------------------------------------------------------------
-- | Morphisms in Poly
--
-- The type of morphisms in Poly is denoted with the _⇒_ arrow:

def poly-map : Π(P Q : Poly), Type :=
  λ P Q → P ⇒ Q

-- A Poly morphisms 'P ⇒ Q' consist of:
--
--   1. mapᵇ : base P → base Q
--   2. mapᶠ : Π(p : base P), fib Q (mapᵇ p) → fib P p
--
-- These are bundled in a Sigma type:
--
--   Σ(mapᵇ : base P → Base Q), (Π(p : base p), fib Q (mapᵇ p) → fib P p)
--
-- Notice how both projections of the Sigma receive a 'base P'. In the
-- PolyTT implementation, we factor out this 'base P' and rewrite our
-- Poly morphism as:
--
--   Π(p : base P), Σ(q : base Q), (fib Q q → fib P p)
--
-- This reshuffing is equivalent to the isomorphism between 'A → (B,
-- C)' and '(A → B, A → C)'. This variation on the typical Poly
-- morphism encoding becomes important with Poly-Lambda syntax.

-- We will start by defining a few basic morphisms in the direct Pi
-- over Sigma style as you would in Agda.

-- | The identity morphism maps P to P.  
def id : Π(P : Poly), P ⇒ P :=
  λ P b → (b , λ x → x)

-- | Ay⁰ ⇒ By⁰
def const : Π(A B : Type), (A → B) → (A × y^(fin 0)) ⇒ (B × y^(fin 0)) :=
  λ A B f a → (f a , λ x → x)

-- | yᴮ ⇒ yᴬ
def rep : Π(A B : Type), (A → B) → (fin 1 × y^B) ⇒ (fin 1 × y^A) :=
  λ A B f a → (z 0 , f)

-- | P ⇒ p(1)
def p⇒p1 : Π(P : Poly), P ⇒ (base P × y^Void) :=
  λ P p → ( p , absurd (fib P p)) 

-- | Ay¹ ⇒ By¹
def linear : Π(A B : Type), (A → B) → (A × y^(fin 1)) ⇒ (B × y^(fin 1)) :=
  λ A B f b → (f b , λ x → x)

--------------------------------------------------------------------------------
-- | Poly-Lambda Syntax
--
-- We provide a special form of lambda syntax for defining morphisms
-- in Poly. This allows you to bind the forward map on bases and
-- backwards map on fiber's (which we call a fiber-sink) of
-- polynomials, and connect them in a typesafe manner.
--
-- We declare a Poly-Lambda with a specialized lambda syntax:
--
--  λ (domain⁺ ⇜ domain⁻) ⇒
--
-- Where '(dom-base ⇜ dom-fib)' respectively binds the base and fiber-sink of the
-- domain polynomial.
--
-- We then complete the Poly-Lambda by describing how to wire the
-- codomain polynomial using a 'return' statement:
--
--  return cod-base ⇜ cod-fib
--
-- where 'cod-base ⇜ cod-fib' applies 'cod-base' and 'cod-fib'
-- variables as the base and fiber of the codomain polynomail.
--
-- Between the lambda declaration and return statement we can use
-- various bits of special syntax to manipulate and 'wire' the
-- Poly-Lambda. This syntax will be introduced gradually in this
-- section.
--
-- For a first example we can re-implement idₚ using just the basic
-- Poly-Lambda syntax.
--
-- As a wiring diagram, idₚ looks like:
--
--         ┌─────────┐
--        -│ -┌───┐+ │+
-- idₚ : ──┼──┤  *├──┼──
--         │  └───┘**│
--         └─────────┘
--         *  domain
--         ** codomain
--
-- Where + denotes the base and - denotes the fiber-sink. Being the
-- identity morphism, 'idₚ' maps from 'base P' to 'base P' and 'fib P'
-- to 'fib P'.

def id : Π(P : Poly), P ⇒ P :=
  λ P →
    -- Here we bind the base and fiber-sink of the domain Poly:
    -- domain⁺ : base P
    -- domain⁻ : fib P domain⁺ → _
    λ (domain⁺ ⇜ domain⁻) ⇒
    -- And here we define the base and fiber-sink of the codomain
    -- Poly. In this case we map the base to the base and the
    -- fiber-sink to the fiber-sink.
    return domain⁺ ⇜ λ⁻ codomain-fiber → domain⁻ ← codomain-fiber ; done

-- For reference here we re-implement all the previously defined
-- morphisms using Poly-Lambda syntax:

-- Ay⁰ ⇒ By⁰
def const : Π(A B : Type), (A → B) → (A × y^(fin 0)) ⇒ (B × y^(fin 0)) :=
  λ A B f → 
    λ p⁺ ⇜ p⁻ ⇒
      return f p⁺ ⇜ p⁻

-- yᴮ ⇒ yᴬ
def rep : Π(A B : Type), (A → B) → (fin 1 × y^B) ⇒ (fin 1 × y^A) :=
  λ A B f →
    λ p⁺ ⇜ p⁻ ⇒
      return z 0 ⇜ p⁻ ∘ f

-- | P ⇒ P(1)
def p⇒p1 : Π(P : Poly), P ⇒ (base P × y^Void) :=
  λ P → 
    λ p⁺ ⇜ p⁻ ⇒
      return p⁺ ⇜ p⁻ ∘ (absurd (fib P p⁺))

-- | Ay¹ ⇒ By¹
def linear : Π(A B : Type), (A → B) → (A × y^(fin 1)) ⇒ (B × y^(fin 1)) :=
  λ A B f → 
    λ p⁺ ⇜ p⁻ ⇒
      return f p⁺ ⇜ p⁻

-- | _←_ Notation
--
-- In more complicated morphisms you start to require internal
-- connections across tensored polynomials or to produce feedback
-- loops around polynomials.
--
-- The _←_ notation allows for these sorts of internal connections
-- within Poly-Lambda syntax:
--
--   q-fiber ← p-base;
--
-- From the wiring diagram perspective, a wire has been drawn
-- connecting 'p-base' to 'q-fiber'.
--
-- Operationally this means we have applied 'p-base' to 'mapᵇ' to
-- produce a 'base Q' and applied it to the 'fiber Q'.
--
-- For example, we can demonstrate a simple feedback loop on the inner
-- (domain) Poly by implementing a counter:
--
--              ┌───────────┐
--	       -│  -┌───┐+  │+
-- counterₚ : ──┤  ┌┤ ℕ ├┬──┼──
--            ()│  │└───┘│  │ℕ
--              │  └──*──┘  │
--              └───────────┘
--              Note: At * we apply 'succ'
--
-- Here the outer (codomain) Poly receives a unit value, which we
-- discard, and the inner Poly emits a ℕ which is fanned out to both
-- the base of the outer Poly and back to the fiber-sink of the inner
-- Poly.
--
-- For this machine we will need to introduce two concepts:
--
-- 1. A special syntax element for the unique sink--which we call
--    'drop'--which does nothing with its input. The syntax for drop
--    is a '!' character.
--
-- 2. Applying a function to the base of the inner Poly.
--
--    Whenever we are in a positive position (the base) we have a
--    value and can apply a function to it. In this case we apply
--    'succ' to the base in the feedback loop to increment the
--    counter.

def counter : (ℕ × y^ℕ) ⇒ (ℕ × y^Unit) :=
  -- Bind the base and fiber-sink of the inner Poly:
  -- n⁺ : base (ℕ × ℕ)
  -- n⁻ : fib (ℕ × ℕ) n⁺
  λ n⁺ ⇜ n⁻ ⇒

    -- Apply 'succ' to n⁺ and connect it back to n⁻ to create the
    -- feedback loop:
    n⁻ ← succ n⁺;

    -- Drop the fiber-sink from the outer Poly and connect n⁺ to its
    -- base.
    return n⁺ ⇜ !

-- Uncomment to demo the counter:
-- #normalize (step-moore ℕ Unit ℕ .unit 2 counterₚ)

def counter' : (ℕ × y^ℕ) ⇒ (ℕ × y^Unit) :=
  λ n → ( n , λ _ → succ n )

def counter≡counter : counter = counter' := refl

-- | Let Notation
--
-- Let bindings allow you to apply a 'base' to a Poly morphisms inside
-- a Poly-Lambda and bind the resulting components.
--
-- We can do this because we have internally enocoded our morphisms
-- as:
--
--   Π(p : base P), Σ(q : base Q), (fib Q q → fib P p)
--
-- By applying a 'base P' to the morphism, we simply return a pair of
-- a 'base Q' and the 'fib Q _ → fib P _' map which we bind to variables:
--
--   let (q⁺ , f⁻) := f p⁺;
--
-- With types:
--
--   q⁺ : base Q
--   f⁻ : fib Q (mapᵇ p⁺) → fib P p⁺'.
--
-- 
-- Let comes in positive and negative forms which allow you to apply
-- the base and fiber-sink components of Poly morphisms respectively.
--
-- Eg., Given 'p⁺ : base P' and 'p⁻ : fib P p⁺':
--
--    -- Apply our 'p⁺ : base P' to the morphism 'P ⇒ Q' and project
--    -- out the fst component 'q⁺ : base Q'
--    let q⁺ := fst (g p⁺);
--
--    -- Apply our 'p⁺ : base P' to the morphism 'P ⇒ Q' and project
--    -- out the snd component 'g_fib : fib Q q⁺ → fib P p⁺'
--    let g_fib := snd (g p⁺);
--
--    -- Remember here that when in a negative position we are dealing
--    -- with sinks which expect values rather then produce them. Thus
--    -- we need to think about 'p⁻' as an obligation to produce a
--    -- 'fib P p⁺'.
--    --
--    -- In a negative fragment _∘_ is special syntax for
--    -- precomposition with sinks. p⁻ is an obligation to provide a
--    -- 'fib P p⁺' and it is precomposed with 'g_fib' which is a
--    -- function which maps a 'fib Q q⁺' to a 'fib P p⁺'.
--    -- 'q⁻' is thus an obligation to provide a 'fib Q q⁺.
--    let- q⁻ := p⁻ ∘ g_fib;
--
-- Composition of Poly morphisms serves as a good example of let bindings:
--
--   compose : Π (P Q R : Poly), (Q ⇒ R) → (P ⇒ Q) → (P ⇒ R)
--
-- First lets build an intuition for composition in Poly using wiring
-- diagrams:
--
-- Given 'g : P ⇒ Q' and 'f : Q ⇒ R':
--
--          ┌─────────┐
--         -│ -┌───┐+ │+
--   g :  ──┼──┤  P├──┼───
--          │  └───┘ Q│
--          └─────────┘
--
--          ┌─────────┐
--         -│ -┌───┐+ │+
--   f :  ──┼──┤  Q├──┼───
--          │  └───┘ R│
--          └─────────┘
--
-- We define composeₚ as:
--
--               ┌───────────────┐
--               │  ┌─────────┐  │
--              -│ -│ -┌───┐+ │+ │+
--   compose : ──┼──┼──┤  P├──┼──┼──
--               │  │  └───┘ Q│  │
--               │  └─────────┘ R│
--               └───────────────┘
--
-- You can think of composeₚ as building a Matryoshka doll of
-- polynomials where the middle Poly Q is an interface translation
-- layer between the inner and outer Polys. This will become clear
-- when we look at wiring diagrams later.
--
-- Starting from our inner 'P : Poly' we use let and let- to apply our
-- Poly morphisms and build up to a 'base R' and obligation 'fib R
-- (base R)':

def compose : Π(P Q R : Poly), (Q ⇒ R) → (P ⇒ Q) → (P ⇒ R) :=
  λ P Q R f g →
    λ p⁺ ⇜ p⁻ ⇒
      let (q⁺ , g⁻) := g p⁺;
      let- q⁻ := p⁻ ∘ g⁻;

      let (r⁺ , f⁻) := f q⁺;
      let- r⁻ := q⁻ ∘ f⁻;

      return r⁺ ⇜ r⁻

def compose : Π(P Q R : Poly), (Q ⇒ R) → (P ⇒ Q) → (P ⇒ R) :=
  λ P Q R f g →
    λ p⁺ ⇜ p⁻ ⇒
      let (q⁺ , g⁻) := g p⁺;
      let- q⁻ := p⁻ ∘ g⁻;

      let (r⁺ , f⁻) := f q⁺;
      let- r⁻ := q⁻ ∘ f⁻;

      return (fst (f (fst (g p⁺)))) ⇜ λ⁻ r →
        r⁻ ← r ; done

-- For reference, compose can be defined as follows without poly-lambda syntax:

def compose' : Π(P Q R : Poly), (Q ⇒ R) → (P ⇒ Q) → (P ⇒ R) :=
  λ P Q R f g p⁺ →
    let (q⁺ , q⁻) := g p⁺ in
    let (r⁺ , r⁻) := f q⁺ in
    (r⁺ , λ r → q⁻ (r⁻ r))

def compose-equiv : compose = compose' := refl

-- We provide a special _⇜_ syntax to streamline this use of let
-- bindings. It allows you to apply an entire Poly to a morphism and
-- bind both projections of the resulting Poly.
--
-- These two fragments are thus equivalent:
--
--    let (q⁺ ⇜ q⁻) := g (p⁺ ⇜ p⁻);
--
--    let (q⁺ , g⁻) := g p⁺;
--    let- q⁻ := p⁻ ∘ g⁻;
--
-- We can simplify composeₚ as such:

def compose' : Π(P Q R : Poly), (Q ⇒ R) → (P ⇒ Q) → (P ⇒ R) :=
  λ P Q R f g → λ p⁺ ⇜ p⁻ ⇒
    let (q⁺ ⇜ q⁻) := g (p⁺ ⇜ p⁻);
    let (r⁺ ⇜ r⁻) := f (q⁺ ⇜ q⁻);
    return r⁺ ⇜ r⁻

-- We can prove the equivalence of these two definitions:
-- def compose-equiv : composeₚ = composeₚ' := refl

-- | Working with tensors
--
-- In the case of tensor products, we provide a special syntax for
-- splitting apart the inlets of tensored polynomials.
--
-- Given a 'P ⊗ Q':
--
--   let (p⁺ , q⁺) := pq⁺;
--   let⁻ (p⁻ , q⁻) := pq⁻;
--
-- NOTE: The positive form of tensor splitting is not yet supported.
--
-- This comes in handy when defining 'swapₚ':
--
--             ┌──────────────┐
--            -│   -┌───┐+    │+
--           ──┼─┐┌─┤  p├──┐┌─┼──
--   swap :    │ ││ └───┘  ││ │
--            -│ └│┐┌───┐+ └│┐│+
--           ──┼──┘└┤  q├───┘└┼──
--             │   -└───┘     │
--             └──────────────┘

def swap (P Q : Poly) : (tensor-⊗ P Q) ⇒ (tensor-⊗ Q P) :=
  λ (p⁺ , q⁺) ⇜ (p⁻ , q⁻) ⇒
    return (q⁺ , p⁺) ⇜ (q⁻ , p⁻)

def swap' (P Q : Poly) : (tensor-⊗ P Q) ⇒ (tensor-⊗ Q P) :=
  λ (p⁺, q⁺) → ((q⁺, p⁺) , λ (p⁻, q⁻) → (q⁻ , p⁻) )

def swap≡swap' : Π(P Q : Poly), swap = swap' := λ P Q → refl

-- | λ⁻ or Negative-lamda
--
-- Negative-lambda allows you to bind the fiber-sink of a Poly.  This
-- is useful to build the input side of a morphism.
--
--         ┌────────────┐
--        -│  -┌───┐+   │+
--   f : ──┼──*┤ℕ ℕ├──┬─┼──
--        ℕ│  │└───┘  │ │ℕ
--         │  └───────┘ │
--         └────────────┘
--      Note at * we apply 'add : ℕ → ℕ → ℕ'
--

def f : (ℕ × y^ℕ) ⇒ (ℕ × y^ℕ) :=
  λ n⁺ ⇜ n⁻ ⇒
    return n⁺ ⇜ λ⁻ (m : ℕ) → n⁻ ← add m n⁺; done

--------------------------------------------------------------------------------
-- | Moore Machines
--
-- ▆  If 𝐴, 𝐵, and 𝑆 are sets, an (𝐴, 𝐵)-Moore machine with
-- │  states 𝑆 consists of two functions
-- │    return : 𝑆 → 𝐵
-- │    update : 𝑆 × 𝐴 → 𝑆
--
-- An AB-Moore Machine is simply morphism between monomials:
--
--   Syˢ ⇒ Oyᴵ

def Moore : Type → Type → Type → Type :=
  λ S I O → (S × y^S) ⇒ (O × y^I)

-- The inner Poly 'S × S' represents the internal state of the machine
-- and the outer Poly 'O × I' describes the input and output types.
--
-- At any point in time the Machine is in some state 's ∈ S' and we
-- can use the output function to produce an output 'o ∈ O'. We can
-- also feed it an input 'i ∈ I' to switch to a new state using the
-- transition function and the current state.
--
-- We can write a helper function for building a Moore Machine from
-- output and transition functions:

def moore (S I O : Type) : (S → O) → (S → I → S) → Moore S I O :=
  λ output transition →
    λ s⁺ ⇜ s⁻ ⇒
      return (output s⁺) ⇜ λ⁻ (i : I) → s⁻ ← transition s⁺ i; done

def moore' (S I O : Type) : (S → O) → (S → I → S) → Moore S I O :=
  λ output transition s →
    (output s , transition s)

def moore≡moore' : Π(S I O : Type), Π(out : S → O), Π(trans : S → I → S),
  (moore S I O out trans) = (moore' S I O out trans) :=
    λ S I O output transition → refl

-- And then we can build the Three State Moore Machine example from the Poly Book (ex3.2):

def Command := #{ .Green, .Orange }
def Output := #{ .B1, .B2 }

-- | RGB × RGB ⇒ Output × Command
def three-state-moore : Moore RGB Command Output :=
  let output : RGB → Output := {
      .Red   = .B1
    , .Green = .B2
    , .Blue  = .B2
  } in
  let transition : RGB → Command → RGB := {
      .Red   = { .Green = .Red  , .Orange = .Green }
    , .Green = { .Green = .Blue , .Orange = .Red }
    , .Blue  = { .Green = .Blue , .Orange = .Red }
  } in
  moore RGB Command Output output transition

-- Earlier we were introduced to counter which is in fact a Moore
-- Machine:

def counterₚ-is-a-machine : Moore ℕ Unit ℕ := counter

-- It can be redefined using the  'moore' function:

def counterₘ : Moore ℕ Unit ℕ :=
  moore ℕ Unit ℕ (λ a → a) (λ n _ → succ n)

-- And we can prove the equivalence of these two definitions:
def counterₚ≡counterₘ : counter = counterₘ := refl

--------------------------------------------------------------------------------
-- | Deterministic Finite State Automata
--
-- From a Moore Machine we can build DFSAs:

def DFSA : Type → Type → Type :=
  λ S A → Moore S A Bool

-- S is the DFSA state type and A is the alphabet.
--
-- Here we build a 3 State DFSA with a two symbol alphabet:

def three-state-dfsa : DFSA #{ .A, .B, .C} #{ .a₀, .a₁ } :=
  let check : #{ .A, .B, .C } → Bool :=
    { .A = .false
    , .B = .true
    , .C = .false }
  in
  let step : #{ .A, .B, .C } → #{ .a₀, .a₁ } → #{ .A, .B, .C } :=
    { .A = { .a₀ = .B, .a₁ = .C }
    , .B = { .a₀ = .C, .a₁ = .B }
    , .C = { .a₀ = .A, .a₁ = .A }
    }
  in
  λ s⁺ ⇜ s⁻ ⇒ return (check s⁺) ⇜ (s⁻ ∘ (step s⁺))

-- | Memoryless Dynamical System
--
-- We can also define the MDS from the Poly Book, defined as:
--
--   Byᴮ ⇒ Byᴬ
--

def mds (A B : Type) : (A → B) → Moore B A B :=
  λ f →
    λ b⁺ ⇜ b⁻ ⇒
      return b⁺ ⇜ λ⁻ (a : A) → b⁻ ← f a; done

-- With 'mds' we can build the delay line and summation examples:

--            ┌───────────┐
--           -│  -┌───┐+  │+
-- delayₘ : ──┼───┤ℕ ℕ├───┼──
--           ℕ│   └───┘   │ℕ
--            └───────────┘

def delayₘ : Moore ℕ ℕ ℕ :=
  mds ℕ ℕ (λ x → x)

--          ┌───────────┐
--         -│  -┌───┐+  │+
-- sumₘ : ──┼─*─┤ℕ ℕ├───┼──
--       ℕ×ℕ│   └───┘   │ℕ
--          └───────────┘
--       Note at * we apply the addition operation

--def sumₘ : (ℕ × ℕ) ⇒ (ℕ × (ℕ × ℕ)) :=
def sumₘ : Moore ℕ (ℕ × ℕ) ℕ :=
  mds (ℕ × ℕ) ℕ (λ (x , y) → add x y)

--------------------------------------------------------------------------------
-- | Deterministic Finite State Automata
--
--  ▆ A deterministic state automaton consists of
--  │ 1. a set 𝑆, elements of which are called states;
--  │ 2. a set 𝐴, elements of which are called input symbols;
--  │ 3. a function 𝑢 : 𝑆 × 𝐴 → 𝑆, called the update function;
--  │ 4. an element 𝑠0 ∈ 𝑆, called the initial state; and
--  │ 5. a subset 𝐹 ⊆ 𝑆, called the accept states.


-- DFSAs can be expressed with as a Moore Machine:

def DFSA : Type → Type → Type :=
  λ S A → Moore S A Bool


-- | Build a DFSA from its requisite components.
def dfsa : Π(S A : Type), ((S × A) → S) → (S → Bool) → S → DFSA S A :=
  λ S A update check s → moore S A Bool check (λ s a → update (s , a))

-- S is the DFSA state type and A is the alphabet.
--
-- Here we build a 3 State DFSA with a two symbol alphabet:

def three-state-dfsa : DFSA #{ .A, .B, .C} #{ .a₀, .a₁ } :=
  let check : #{ .A, .B, .C } → Bool :=
    { .A = .false
    , .B = .true
    , .C = .false }
  in
  let step : #{ .A, .B, .C } → #{ .a₀, .a₁ } → #{ .A, .B, .C } :=
    { .A = { .a₀ = .B, .a₁ = .C }
    , .B = { .a₀ = .C, .a₁ = .B }
    , .C = { .a₀ = .A, .a₁ = .A }
    }
  in
  λ s⁺ ⇜ s⁻ ⇒ return (check s⁺) ⇜ (s⁻ ∘ (step s⁺))

--------------------------------------------------------------------------------
-- | Dependent Dynamical Systems
--
-- ▆ A dependent dynamical system (or a dependent Moore machine, or
-- | simply a dynamical system) is a lens
-- │
-- │   𝜑 : Syˢ ⇒ P
-- │
-- │ for some 𝑆 ∈ Set and 𝑝 ∈ Poly. The set 𝑆 is called the set of
-- │ states—with 𝑆yˢ called the state system—and the polynomial 𝑝 is called
-- │ the interface. Positions of the interface are called outputs, and
-- │ directions of the interface are called inputs
-- │
-- │ The lens’s on-positions function 𝜑₁ : 𝑆 → 𝑝(1) is called the return
-- │ function, and for each 𝑠 ∈ 𝑆, the lens’s on-directions function 𝜑♯ 𝑠 :
-- │ 𝑝[𝜑₁(𝑠)] → 𝑆 is called the update function at 𝑠.

def Command := #{ .Green, .Orange }
def Three : Type := #{ .One, .Two, .Three }

-- | 𝜑 : 𝑆yˢ → yᵃ + 1.
-- def ex-321 : (Three × Three) ⇒ tensor-+ (Unit × Command) (Unit × Unit) :=
--   let check : Three → Either Unit Unit := { .One = Left Unit Unit .unit , .Three = Right Unit Unit .unit, .Two = Left Unit Unit .unit } in
--   let update₁ : Command → Three := { .Green = .One , .Orange = .Two } in
--   let update₂ : Command → Three := { .Green = .One , .Orange = .Three } in
--   let update₃ : Void → Three := {} in
--   λ state⁺ → (check state⁺ , λ x → ?)

-- { .true = λ v → #{ .Green, .Orange }
-- , .false = λ v → #{ .unit }
-- } (fst ({ .One = (.true , .unit), .Three = (.false , .unit), .Two = (.true , .unit) } state⁺))
--   (snd ({ .One = (.true , .unit), .Three = (.false , .unit), .Two = (.true , .unit) } state⁺))


--------------------------------------------------------------------------------
-- | Interpretation of Poly Morphisms

-- We can use 'hom-base' and 'hom-fiber' to extract the base and fiber
-- respectively.

def identity : Π(A : Type), A → A :=
  λ A →
    hom-base (A × y^A) (A × y^A) (id (A × y^A))

--def swap : Π(A B : Type), (A × B) → (B × A) :=
--  λ A B →
--    hom-base ((A × B) × (#{} × y^#{})) ((B × A) × (#{} × y^#{}))
--      (swapₚ (A × y^#{}) (B × y^#{}))

def delay : ℕ → ℕ :=
  hom-base (ℕ × y^ℕ) (ℕ × y^ℕ) delayₘ

def sum : (ℕ × ℕ) → ℕ :=
  λ n×n → hom-fiber (ℕ × y^ℕ) (ℕ × y^(ℕ × ℕ)) sumₘ 0 n×n

--------------------------------------------------------------------------------
-- | Wiring Diagrams
--
-- The Poly book describes Wiring Diagrams as:
--
-- ▆ Formally, and more precisely, we can think of each box in a wiring
-- │ diagram as an interface given by some monomial. Then the entire
-- │ wiring diagram—specifying how these boxes nest within a larger
-- │ box—is just an interaction pattern between the interfaces, with
-- │ the larger box playing the role of the wrapper interface.
--  
--
--                ┌─────────────────┐
--	         -│ -┌───┐+ -┌───┐+ │+
-- two-chainₚ : ──┼──┤ P ├───┤ Q ├──┼──
--               A│ A└───┘B B└───┘C │C
--                └─────────────────┘

def two-chainₚ (A B C : Type) : (tensor-⊗ (B × y^A) (C × y^B)) ⇒ (C × y^A) :=
  λ (p⁺ , q⁺) ⇜ (p⁻ , q⁻) ⇒
     q⁻ ← p⁺;
     return q⁺ ⇜ p⁻

def plug : Π(A B C : Type),
  (A → B) → (B → C) → (tensor-⊗ (B × y^B) (C × y^C)) ⇒ (tensor-⊗ (B × y^A) (C × y^B)) :=
    λ A B C f g →
      let fₚ : (B × y^B) ⇒ (B × y^A) := mds A B f in
      let gₚ : (C × y^C) ⇒ (C × y^B) := mds B C g in
      mux-⊗ (B × y^B) (B × y^A) (C × y^C) (C × y^B) fₚ gₚ

def two-chain :
  Π(A B C : Type),
  (A → B) →
  (B → C) →
   (tensor-⊗ (B × y^B) (C × y^C)) ⇒ (C × y^A) :=
    λ A B C f g →
      compose
      (tensor-⊗ (B × y^B) (C × y^C))
      (tensor-⊗ (B × y^A) (C × y^B))
      (C × y^A)
      (two-chainₚ A B C)
      (plug A B C f g)

-- def compose :
--   Π(A B C : Type),
--   (A → B) →
--   (B → C) →
--   A →
--   (B × C) :=
--   λ A B C f g a →
--     let two-chain' := two-chain A B C f g
--     in hom-fiber ((B × C) × (B × C)) (C × A) two-chain' (? , ?) a

-- Here we use _←_ to connect the 'fst' projection of the base of P to
-- the fiber-sink of Q.


--              ┌────────────────────────┐
--              │  ┌───────┐             │ 
--              │  │┌─────┐│  ┌─────┐    │ 
--              │  └┤A    ││  │     │    │ 
-- fib-wire : ──┤   │  P A├┴──┤A Q A├┬───┼──
--            ()│  ┌┤A    │   │     ││   │A
--              │  │└─────┘   └─────┘│   │ 
--              │  └─────────────────┘   │ 
--              └────────────────────────┘

def fib-wire : Π(A : Type), (tensor-⊗ (A × y^(A × A)) (A × y^A)) ⇒ (A × y^Unit) :=
  λ A →
    λ (p⁺, q⁺) ⇜ (p⁻, q⁻) ⇒
      return q⁺ ⇜ λ⁻ _ →
        p⁻ ← (p⁺, q⁺);
        q⁻ ← p⁺;
	done

def fib-wire' : Π(A : Type), (tensor-⊗ (A × y^(A × A)) (A × y^A)) ⇒ (A × y^Unit) :=
  λ A (p⁺, q⁺) → (q⁺ , λ _ → ((p⁺ , q⁺) , p⁺))

def fib-wire≡fib-wire' : Π(A : Type), (fib-wire A) = (fib-wire' A) :=
  λ A → refl

-- With our wiring diagram defined, the next move is to tensor
-- together Moore machines to match the inner interface of the
-- diagram.
--
-- Fibonacci consists of an adder and a delay line, which we defined
-- previously, tensored with the parallel product:

def delay⊗sumₘ : (tensor-⊗ (ℕ × y^ℕ) (ℕ × y^ℕ)) ⇒ (tensor-⊗ (ℕ × y^(ℕ × ℕ)) (ℕ × y^ℕ)) :=
  mux-⊗ (ℕ × y^ℕ) (ℕ × y^(ℕ × ℕ)) (ℕ × y^ℕ) (ℕ × y^ℕ) sumₘ delayₘ 

-- Notice that the outer interface of 'delay⊗sumₘ' is the same shape as
-- the inner interface of 'fib-wire':
--
--  delay⊗sumₘ : (tensor-⊗ (ℕ × ℕ) (ℕ × ℕ)) ⇒ (tensor-⊗ (ℕ × (ℕ × ℕ)) (ℕ × ℕ))
--  fib-wire   :                 Π(A : Type), (tensor-⊗ (A × (A × A)) (A × A)) ⇒ (A × Unit)
--   
-- This means we can use 'composeₚ' connect them together and produce
-- a poly morphism with the inner interface of 'delay⊗sumₘ' and the
-- outer interface of 'fib-wire':

def fibₘ : Moore (ℕ × ℕ) Unit ℕ :=
  compose
    (tensor-⊗ (ℕ × y^ℕ) (ℕ × y^ℕ))
    ((tensor-⊗ (ℕ × y^(ℕ × ℕ)) (ℕ × y^ℕ)))
    ((ℕ × y^Unit))
    (fib-wire ℕ)
    delay⊗sumₘ

-- #normalize (step-moore (ℕ × ℕ) Unit ℕ .unit (3, 2) fibₘ)

def input : List Unit := Cons Unit .unit (Cons Unit .unit ((Cons Unit .unit (Nil Unit))))
-- #normalize (process-moore (ℕ × ℕ) Unit ℕ (1, 1) input fibₘ)

-- From here you can start to see the power Poly. We can build
-- granular Moore Machines which perform narrow behaviors, tensor them
-- together, and then compose them with wiring diagrams that describe
-- larger subroutines.
--
-- Those compositions themselves are themselves Moore Machines which
-- can be tensored with more Moore machines and then composed with a
-- wiring diagram to describe even larger subroutines.

--------------------------------------------------------------------------------
-- | Moore Machines as Lenses
-- TODO

--------------------------------------------------------------------------------
-- | Polynomial Composition: _◁_ 
-- TODO
