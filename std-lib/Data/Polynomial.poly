import Data::Natural
import Data::Either
import Data::Void

--------------------------------------------------------------------------------

-- Interpret a Poly as a functor Type → Type
def apply : Poly → Type → Type :=
  -- NOTE: This is a nicer definition but we would need to reorganize
  -- the module to reference tensor-◁ here:
  --λ P A → base (tensor-◁ P (constantₚ A))
  λ P A → Σ (p : base P), fib P p → A

-- | The map operation for some Poly 'P' interpreted as a  Functor.
def mapₚ : Π(P : Poly) (A B : Type), (A → B) → (apply P) A → (apply P) B :=
  λ P A B f (p , a) → ( p , λ x → f (a x) )

-- Interpret a morphism as a natural transformation
def ofM (P Q : Poly) : P ⇒ Q → Π (A : Type), apply P A → apply Q A :=
  λ m A (p , a) →
    let (q , f) := m p in
    ( q , λ x → a (f x) )

-- | A monomial S × Y^T
def monomialₚ : Type → Type → Poly :=
  λ S T → S × y^T

def constantₚ : Type → Poly :=
  λ S → S × y^Void

-- | The Identity Polynomial
def Y := monomialₚ Unit Unit

-- | The identity morphism in Poly
--
--   ┌─────────┐
--  -│ -┌───┐+ │+
-- ──┼──┤  p├──┼──
--   │  └───┘  │
--   └─────────┘
--
def id (P : Poly) : P ⇒ P :=
  λ p⁺ ⇜ p⁻ ⇒
    return p⁺ ⇜ p⁻

-- | Composition of polynomials
--
--   ┌───────────────┐
--   │  ┌─────────┐  │
--  -│ -│ -┌───┐+ │+ │+
-- ──┼──┼──┤  p├──┼──┼──
--   │  │  └───┘ q│  │
--   │  └─────────┘ r│
--   └───────────────┘
--
def compose (P Q R : Poly) : Q ⇒ R → P ⇒ Q → P ⇒ R :=
  λ f g → λ p⁺ ⇜ p⁻ ⇒
    let (q⁺ ⇜ q⁻) := g (p⁺ ⇜ p⁻);
    let (r⁺ ⇜ r⁻) := f (q⁺ ⇜ q⁻);
    return r⁺ ⇜ r⁻

-- | Backwards function composition, Prefix notation for _⨟_.
def then (P Q R : Poly) : P ⇒ Q → Q ⇒ R → P ⇒ R :=
  λ g f → compose P Q R f g

-- | Extract the base map from 'P ⇒ Q'.
def hom-base : Π(P Q : Poly), P ⇒ Q → base P → base Q :=
  λ P Q f p → fst (f p)

-- | Extract the fiber map from 'P ⇒ Q'.
def hom-fiber : Π(P Q : Poly), Π(p⇒q : P ⇒ Q), Π( p: base P), fib Q (fst (p⇒q p)) → fib P p :=
  λ P Q p⇒q baseₚ → snd (p⇒q baseₚ)

--------------------------------------------------------------------------------

-- The 'object of morphisms' from 'P' to 'Q' in Poly.
def internal-hom : Poly → Poly → Poly :=
  λ P Q → Σ (f : P ⇒ Q), y^(Σ (p : base P), (fib Q (fst (f p))))

--------------------------------------------------------------------------------

-- | P + Q
-- The Categorical Co-Product of two Polyonomials
--
-- P + Q ≔ ∑[ i ∈ I ] x^aᵢ + ∑[ j ∈ J ] y^bⱼ
def tensor-+ : Poly → Poly → Poly :=
  λ P Q → Σ (pq : Either (base P) (base Q)), y^(either (base P) (base Q) Type (λ p → fib P p) (λ q → fib Q q) pq)

--------------------------------------------------------------------------------

-- | P ◁ Q
-- Composition of Polyonomial Functors
--
-- ⟦ P ◁ Q ⟧ ≡ ⟦ P ⟧ ∘ ⟦ Q ⟧
def tensor-◁ : Poly → Poly → Poly :=
  λ P Q →
    Σ(pbase : base P), Σ(f : fib P pbase → base Q), y^(Σ(pfib : fib P pbase), fib Q (f pfib))

def mux-◁ : Π(P Q R Z : Poly), (P ⇒ Q) → (R ⇒ Z) → (tensor-◁ P R ⇒ tensor-◁ Q Z) :=
  λ P Q R Z p⇒q r⇒z (pbase , pfib→rbase) →
    ((fst (p⇒q pbase) , λ qfib →
      let pfib := (snd (p⇒q pbase)) qfib in
      fst (r⇒z (pfib→rbase pfib))
     ),
    λ (qfib , zfib) →
      let pfib := (snd (p⇒q pbase)) qfib in
      let rbase := pfib→rbase pfib in
      ((snd (p⇒q pbase)) qfib , (snd (r⇒z rbase)) zfib))

def Comonoid-◁ : Type :=
  Σ(C : Poly), Σ(e : C ⇒ y^Unit), Σ(d : C ⇒ tensor-◁ C C), #{ .promise }

def ◁-pow : ℕ → Poly → Poly :=
  λ n P → ℕ-rec Poly { .zero = y^Unit , .succ = λ Q → tensor-◁ Q P } n

-- TODO: Broken due to typechecker bug. See Issue #55.
-- def ◁-pow-map : Π(n : ℕ), Π(C : Comonoid-◁), (fst C ⇒ ◁-pow n (fst C)) :=
--   λ n C →
--     let P : Poly := fst C in
--     let d : P ⇒ tensor-◁ P P := fst (snd (snd C)) in
--     ℕ-elim
--       (λ m → (P ⇒ ◁-pow m P))
--       { .zero = fst (snd C)
--       , .succ = λ m acc → compose P (tensor-◁ P P) (◁-pow m P) (mux-◁ P (◁-pow m P) P P acc ?) d
--       }
--       n
  
def Monoid : Type :=
  Σ(M : Type), Σ(unit : M), Σ(smoosh : M → M → M), #{ .promise }
  
def Monoid→Comonoid-◁ : Monoid → Comonoid-◁ :=
  λ (M, (unit, (smoosh, _))) →
  let C : Poly               := y^M in
  let e : (C ⇒ y^Unit)       := λ _ → (.unit, λ _ → unit) in
  let d : (C ⇒ tensor-◁ C C) := λ _ → ((.unit, λ _ → .unit), λ (x, y) → smoosh x y ) in
  (C , (e , (d , .promise)))

def Discrete : Type → Comonoid-◁ :=
  λ T →
  let C : Poly               := T × y^Unit in
  let e : (C ⇒ y^Unit)       := λ _ → (.unit, λ _ → .unit) in
  let d : (C ⇒ tensor-◁ C C) := λ t → ((t, λ _ → t), λ _ → .unit ) in
  (C, (e , (d, .promise)))

def Bicomodule : Π(C D : Comonoid-◁), Type :=
  λ C D → Σ(P : Poly), Σ(l : P ⇒ (tensor-◁ (fst C) P)), Σ(r : P ⇒ tensor-◁ P (fst D)), #{ .promise }

def Copresheaf : Π(C : Comonoid-◁), Type :=
  λ C → Bicomodule C (Discrete Void)

def Multivar-Poly : Π(A : Type), Type :=
  λ A → Bicomodule (Discrete Unit) (Discrete A)

--------------------------------------------------------------------------------

-- | P ⊗ Q
-- The Parallel Product of two Polynomials
def tensor-⊗ : Poly → Poly → Poly :=
  λ P Q → Σ ((p , q) : base P × base Q), y^(fib P p × fib Q q)

def eval-⊗ : Π(P Q : Poly), tensor-⊗ P (internal-hom P Q) ⇒ Q :=
  λ P Q (bp , bf) →
    (hom-base P Q bf bp 
    , λ fq → (hom-fiber P Q bf bp fq, (bp , fq))
    )

-- NOTE: These duplicate definitions exist to demonstrate Poly-Lambda
-- syntax vs direct Sigma encoding.
def eval-⊗ : Π (P Q : Poly), tensor-⊗ P (internal-hom P Q) ⇒ Q :=
 λ P Q → λ (p⁺ , f⁺) ⇜ (qf⁻ , (p⁻ , q⁻)) ⇒
   let (q⁺ , qf⁺) := f⁺ p⁺;
   p⁻ ← p⁺;
   return q⁺ ⇜ λ⁻ (v : fib Q q⁺) →
     (qf⁻ , q⁻) ← (qf⁺ v , v);
     done

def uncurry-⊗ : Π(P Q R : Poly), (P ⇒ internal-hom Q R) → ((tensor-⊗ P Q) ⇒ R) := 
 λ P Q R f (bp, bq) →
   let (g, g') := f bp in
   let fg := hom-fiber Q R g in
   ( 
     (hom-base Q R g) bq
   , λ fr → (g' (bq , fr ) , fg bq fr)
   )

def curry-⊗ : Π(P Q R : Poly), ((tensor-⊗ P Q) ⇒ R) → (P ⇒ internal-hom Q R) :=
 λ P Q R f bp →
   ( λ bq →
       let (br, fr) := f (bp, bq) in
       (br, λ r → snd (fr r))
   , λ (bq, fr) →
       let (br, g) := f (bp, bq) in
       fst (g fr)
   )

-- TODO(SOLOMON): Implement with poly-lambda to compare syntax
-- def eval-⊗ : Π(P Q : Poly), tensor-⊗ P (internal-hom P Q) ⇒ Q :=
--   λ P Q →
--     λ (bp⁺, bf⁺) ⇜ (fp⁻, (p⁻, q⁻)) ⇒
--     return hom-base P Q bf⁺ bp⁺ ⇜ q⁻

-- | Parallel composition of systems, eg. the Parallel Product of
-- natural transformations between polynomials.
def mux-⊗ : Π(P P' Q Q' : Poly), P ⇒ P' → Q ⇒ Q' → tensor-⊗ P Q ⇒ tensor-⊗ P' Q' :=
   λ P P' Q Q' f g (bp, bq) →
     ((hom-base P P' f bp , hom-base Q Q' g bq)
     , λ (fp', fq') → (hom-fiber P P' f bp fp', hom-fiber Q Q' g bq fq')
     )

def swap-⊗ : Π (P Q : Poly), tensor-⊗ P Q ⇒ tensor-⊗ Q P :=
  λ P Q → λ (p⁺ , q⁺) ⇜ (p⁻ , q⁻) ⇒
    return (q⁺ , p⁺) ⇜ (q⁻ , p⁻)

def assoc-⊗ₗ : Π(P Q R : Poly), tensor-⊗ (tensor-⊗ P Q) R ⇒ tensor-⊗ P (tensor-⊗ Q R) :=
  λ P Q R ((bp, bq), br) →
    ( (bp , (bq, br))
    , λ (fp, (fq, fr)) → ((fp, fq), fr)
    )

def assoc-⊗ᵣ : Π(P Q R : Poly), tensor-⊗ P (tensor-⊗ Q R) ⇒ tensor-⊗ (tensor-⊗ P Q) R :=
  λ P Q R (bp, (bq, br)) →
    ( ((bp , bq), br)
    , λ ((fp, fq), fr) → (fp, (fq, fr))
    )

def dupe-Y : Y ⇒ tensor-⊗ Y Y :=
  λ _ → ((.unit , .unit) , λ _ → .unit )

def dedupe-Y : tensor-⊗ Y Y ⇒ Y :=
  λ _ → ( .unit , λ _ → (.unit , .unit))

--------------------------------------------------------------------------------

-- | P × Q
-- The Binary Categorical Product
def tensor-× : Poly → Poly → Poly :=
  λ P Q → Σ ((i , j) : base P × base Q), y^(Either (fib P i) (fib Q j))

def fst-× (P Q : Poly) : tensor-× P Q ⇒ P :=
  λ (p⁺ , q⁺) ⇜ pq⁻ ⇒
    return p⁺ ⇜ λ⁻ p → pq⁻ ← Left (fib P p⁺) (fib Q q⁺) p; done

def snd-× (P Q : Poly) : tensor-× P Q ⇒ Q :=
  λ (p⁺ , q⁺) ⇜ pq⁻ ⇒
    return q⁺ ⇜ λ⁻ q → pq⁻ ← Right (fib P p⁺) (fib Q q⁺) q; done

def dupe-× (P : Poly) : P ⇒ tensor-× P P :=
  λ p⁺ ⇜ p⁻ ⇒
    return (p⁺ , p⁺) ⇜ p⁻ ∘ (from-either (fib P p⁺))

--------------------------------------------------------------------------------

-- | P Ⓥ Q
--
def tensor-Ⓥ : Poly → Poly → Poly :=
  λ P Q → Σ ((i , j) : base P × base Q),
    y^(Either (fib P i) (Either ((fib P i) × (fib Q j)) (fib Q j)))

--------------------------------------------------------------------------------

-- | P ∨ Q
--
-- P ∨ Q ≔ P + (P ⊗ Q) + Q
def tensor-v : Poly → Poly → Poly :=
  λ P Q → (tensor-+ (tensor-+ P (tensor-⊗ P Q)) Q)

-- | _∨_ This Inclusion
def This : Π(P Q : Poly), P ⇒ (tensor-v P Q) :=
  λ P Q pbase → 
  ( (.true , (.true, pbase)) , λ x → x )

-- | _∨_ That Inclusion
def That : Π(P Q : Poly), Q ⇒ (tensor-v P Q) :=
  λ P Q qbase → ((.false, qbase) , λ x → x)

-- | _∨_ These Inclusion
def These : Π(P Q : Poly), tensor-⊗ P Q ⇒ (tensor-v P Q) :=
  λ P Q pqbase → ((.true, (.false, pqbase)) , λ x → x)

-- TODO: Broken due to typechecker bug. See Issue #55.
-- | _∨_ Eliminator
-- def theseₚ : Π(P Q R : Poly), P ⇒ R → Q ⇒ R → (tensor-⊗ P Q) ⇒ R → (tensor-v P Q) ⇒ R :=
--   λ P Q R p⇒r q⇒r p⊗q⇒r (tag , args) →
--     let f := hom-base P R p⇒r in
--     let g := hom-base Q R q⇒r in
--     let h := hom-base (tensor-⊗ P Q) R p⊗q⇒r in
--     -- We need to eliminate 'args' to determine which base we have available:
--     ({ .true = f ? , .false = g ? } tag , λ x → ?)

--------------------------------------------------------------------------------

-- | P ⊘ Q
--
-- P ⊘ Q ≔ P + (P ×ₚ Q) + Q
def tensor-⊘ : Poly → Poly → Poly :=
  λ P Q → (tensor-+ P (tensor-+ (tensor-× P Q) Q))

--------------------------------------------------------------------------------

-- | P ⊛ Q
--
-- P ⊛ Q ≔  P + (P Ⓥ Q) + Q
def tensor-⊛ : Poly → Poly → Poly :=
  λ P Q → (tensor-+ P (tensor-+ (tensor-Ⓥ P Q) Q))
