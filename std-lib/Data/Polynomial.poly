import Data::Either
import Data::Void

--------------------------------------------------------------------------------

-- Interpret a Poly as a functor Type → Type
def ofP : Poly → Type → Type :=
  λ P A → Σ (p : base P), fib P p → A

def mapₚ (P : Poly) (A B : Type) : (A → B) → (ofP P) A → (ofP P) B :=
  λ f (p , a) → ( p , λ x → f (a x) )

-- Interpret a morphism as a natural transformation
def ofM (P Q : Poly) : P ⇒ Q → Π (A : Type), ofP P A → ofP Q A :=
  λ m A (p , a) →
    let (q , f) := m p in
    ( q , λ x → a (f x) )

-- S × Y^aₛ
def monomialₚ : Type → Type → Poly :=
  λ S T → S × y^T

Repr
T : Type |- y^(T) : Repr
log y^(T) = T

base (Σ (x : b), y^(f x)) = b × #{ .unit }

(y^(T) : Poly) = Σ (_ : #{ .unit }), y^(T)

Σ (a : A), Σ (b : B), y^(f a b)

def constantₚ : Type → Poly :=
  λ S → S × y^Void

-- | The identity morphism in Poly
--
--   ┌─────────┐
--  -│ -┌───┐+ │+
-- ──┼──┤  p├──┼──
--   │  └───┘  │
--   └─────────┘
--
def idₚ (P : Poly) : P ⇒ P :=
  λ p⁺ ⇜ p⁻ ⇒
    return p⁺ ⇜ p⁻

-- | Composition of polynomials
--
--   ┌───────────────┐
--   │  ┌─────────┐  │
--  -│ -│ -┌───┐+ │+ │+
-- ──┼──┼──┤  p├──┼──┼──
--   │  │  └───┘ q│  │
--   │  └─────────┘ r│
--   └───────────────┘
--
def compose (P Q R : Poly) : Q ⇒ R → P ⇒ Q → P ⇒ R :=
  λ f g → λ p⁺ ⇜ p⁻ ⇒
    let (q⁺ ⇜ q⁻) := g (p⁺ ⇜ p⁻);
    let (r⁺ ⇜ r⁻) := f (q⁺ ⇜ q⁻);
    return r⁺ ⇜ r⁻

-- Prefix notation for _⨟_
def then (P Q R : Poly) : P ⇒ Q → Q ⇒ R → P ⇒ R :=
  λ g f → compose P Q R f g

def hom-base (P Q : Poly) : P ⇒ Q → base P → base Q :=
  λ f p → fst (f p)

--------------------------------------------------------------------------------

def internal-hom : Poly → Poly → Poly :=
  λ P Q → Σ (f : P ⇒ Q), (Σ (p : base P), y^(fib Q (fst (f p))))

--------------------------------------------------------------------------------

-- | P ◁ Q
-- Composition of Polyonomial Functors
--
-- ⟦ P ◁ Q ⟧ ≡ ⟦ P ⟧ ∘ ⟦ Q ⟧
-- Σ ? Π ?   ≡ Σ Π (Σ Π)
-- def tensor-◁ : Poly → Poly → Poly := ?

--------------------------------------------------------------------------------

-- | P + Q
-- The Categorical Co-Product of two Polyonomials
--
-- P + Q ≔ ∑[ i ∈ I ] x^aᵢ + ∑[ j ∈ J ] y^bⱼ
-- def tensor-+ : Poly → Poly → Poly :=
--   λ P Q → Σ (pq : Either (base P) (base Q)), Either (fib P ?) (fib Q ?)

--------------------------------------------------------------------------------

-- | P ⊗ Q
-- The Parallel Product of two Polynomials
def tensor-⊗ : Poly → Poly → Poly :=
  λ P Q → Σ ((p , q) : base P × base Q), y^(fib P p × fib Q q)

def swap-⊗ : Π (P Q : Poly), tensor-⊗ P Q ⇒ tensor-⊗ Q P :=
  λ P Q → λ (p⁺ , q⁺) ⇜ (p⁻ , q⁻) ⇒
    return (q⁺ , p⁺) ⇜ (q⁻ , p⁻)

def dupe-⊗ : Π (P : Poly), P ⇒ tensor-⊗  P P :=
  λ P → λ p⁺ ⇜ p⁻ ⇒
    return (p⁺ , p⁺) ⇜ ( p⁻ , ! )

--------------------------------------------------------------------------------

-- | P × Q
-- The Binary Categorical Product
--
def tensor-× : Poly → Poly → Poly :=
  λ P Q → Σ ((i , j) : base P × base Q), y^(Either (fib P i) (fib Q j))

def fst-× (P Q : Poly) : tensor-× P Q ⇒ P :=
  λ (p⁺ , q⁺) ⇜ pq⁻ ⇒
    return p⁺ ⇜ λ⁻ p → pq⁻ ← Left (fib P p⁺) (fib Q q⁺) p; done

def snd-× (P Q : Poly) : tensor-× P Q ⇒ Q :=
  λ (p⁺ , q⁺) ⇜ pq⁻ ⇒
    return q⁺ ⇜ λ⁻ q → pq⁻ ← Right (fib P p⁺) (fib Q q⁺) q; done

def dupe-× (P : Poly) : P ⇒ tensor-× P P :=
  λ p⁺ ⇜ p⁻ ⇒
    return (p⁺ , p⁺) ⇜ p⁻ ∘ (from-either (fib P p⁺))

--------------------------------------------------------------------------------

-- | P Ⓥ Q
--
def tensor-Ⓥ : Poly → Poly → Poly :=
  λ P Q → Σ ((i , j) : base P × base Q),
    y^(Either (fib P i) (Either ((fib P i) × (fib Q j)) (fib Q j)))

--------------------------------------------------------------------------------

-- | P ∨ Q
--
-- P ∨ Q ≔ P + (P ⊗ Q) + Q
-- def tensor-v : Poly → Poly → Poly :=
--   λ P Q → (tensor-+ (tensor-+ P (tensor-⊗ P Q)) Q)

-- | _∨_ This Inclusion
-- def This : Π(P Q : Poly), P ⇒ (P ∨ Q) :=
--   λ P Q → ?

-- | _∨_ That Inclusion
-- def That : Π(P Q : Poly), Q ⇒ (P ∨ Q) :=
--   λ P Q → ?

-- | _∨_ These Inclusion
-- def These : Π(P Q : Poly), tensor-⊗ P Q ⇒ (P ∨ Q) :=
--   λ P Q → ?

-- | _∨_ Eliminator
-- def theseₚ : Π(P Q R : Poly), P ⇒ R → Q ⇒ R → (P ⊗ Q) ⇒ R → (P ∨ Q) ⇒ R :=
--   λ P Q R p⇒r q⇒r p⊗q⇒r → ?

--------------------------------------------------------------------------------

-- | P ⊘ Q
--
-- P ⊘ Q ≔ P + (P ×ₚ Q) + Q
-- def tensor-⊘ : Poly → Poly → Poly :=
--   λ P Q → (tensor-+ P (tensor-+ (P × Q) Q))

--------------------------------------------------------------------------------

-- | P ⊛ Q
--
-- P ⊛ Q ≔  P + (P Ⓥ Q) + Q
-- def tensor-⊛ : Poly → Poly → Poly :=
--   λ P Q → (tensor-+ P (tensor-+ (P Ⓥ  Q) Q))
