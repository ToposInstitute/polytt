import Data::Polynomial
import Data::Polynomial::Fin

--------------------------------------------------------------------------------
-- Poly Examples

-- P y ≡ y²
--
-- P y ≡ Σ [ i ∈ Fin 1 ] y^aᵢ
--    where
--      a : Fin 1 → Type
--
def P : Π (Y : Type), Poly :=
  λ Y → Σ (_ : fin 1), Y × Y

-- Q y ≡ y³ + y²
-- 
-- Q y ≡ Σ [ i ∈ Fin 2 ] y^aᵢ 
--   where
--     a : Fin 2 → Set
--
-- Note: We use finite sets here for ease of implementation due to
-- polytt lacking pattern matching on fins at the moment.
def Q : Π (Y : Type), Poly :=
  λ Y → Σ (i : #{ .zero, .one }), {
      .zero = Y × Y × Y
    , .one = Y × Y
    } i

-- R y ≡ y³ + y² + y + 1
-- 
-- R y ≡ Σ [ i ∈ Fin 4 ] y^aᵢ 
--   where
--     a : Fin 4 → Set
-- 
def R : Π (Y: Type), Poly :=
  λ Y → Σ (i : #{ .zero, .one, .two, .three}), {
      .zero = Y × Y × Y
    , .one = Y × Y
    , .two = Y
    , .three = Unit
  } i

-- ℕ × y^ℕ
def nyan : Poly := ℕ × ℕ

--------------------------------------------------------------------------------
-- Poly Morphism Examples

-- We can eta-expand around a morphism in poly using our poly lambda
-- syntax:
def eta-expand : Π (A B : Poly), A ⇒ B → A ⇒ B :=
  λ A B f → λ a⁺ a⁻ ⇝
    let (b⁺ ⇜ b⁻) := f (a⁺ ⇜  a⁻);
    return b⁺ ⇜ b⁻


-- | Illustration available here:
-- https://www.youtube.com/live/kPfyHwibgzs?feature=share&t=1213
--
-- ACyᴬᴮ ⊗ Byᴬ ⇒ By¹
def ACyᴬᴮ : Π (A B C : Type), Poly :=
  λ A B C → (A × C) × (A × B)

def Byᴬ : Π (A B : Type), Poly :=
  λ A B → B × A

def By¹ : Π (B : Type), Poly :=
  λ B → B × #{ .only }

-- def ACyᴬᴮ⊗Byᴬ⇒By¹ : Π (A B C : Type), tensor-⊗ (ACyᴬᴮ A B C) (Byᴬ A B) ⇒ (By¹ B) :=
--   λ A B C →
--     λ ac⊗b⁺ ab⊗a⁻ ⇝
-- 
--       return b⁺ ⇜ 
