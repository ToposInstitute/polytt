import Data::Polynomial
import Data::Polynomial::Maybe

--------------------------------------------------------------------------------

def Listₚ : Poly := Σ (n : ℕ), y^(fin n)

-- | The Functor interpretation of 'Listₚ'
def List : Type → Type := apply Listₚ

-- | 'Nil' Data Constructor
def Nil : Π (A : Type), List A :=
  λ A → (0 , {})

-- | 'Cons' Data Constructor
def Cons : Π (A : Type), A → List A → List A :=
  λ A a as → (succ (fst as) , fin-case (fst as) (λ _ → A) a (snd as))

--------------------------------------------------------------------------------

-- | The map operation for the 'List' Functor
def map-list : Π(A B : Type), (A → B) → List A → List B :=
  λ A B f → mapₚ Listₚ A B f

--------------------------------------------------------------------------------

-- | Recursion Principle for Lists
def list-rec : Π (A : Type) (mot : Type),
  mot →
  (A → mot → mot) →
  List A → mot :=
  λ A mot iz is →
    ×-rec ℕ (λ n → fin n → A) (λ _ → mot)
      (ℕ-elim (λ n → Π (as : fin n → A), mot)
        { .zero = λ _ → iz
        , .succ = λ n ih as →
          is (as (z n)) (ih (λ i → as (s n i)))
        }
      )

--------------------------------------------------------------------------------

def head : Π(A : Type), List A → Maybe A :=
  λ A xs → list-rec A (Maybe A) (Nothing A) (λ a _ → Just A a) xs

def tail : Π(A : Type), List A → List A :=
  λ A →
    ×-rec ℕ (λ n → fin n → A) (λ _ → List A)
      (ℕ-cases (λ n → (fin n → A) → List A)
        { .zero = λ _ → Nil A
        , .succ = λ n as → (n , λ i → as (s n i))
        }
      )

-- def toℕ : #{ .just , .nothing } → ℕ :=
--   { .just = 1 , .nothing = 0 }

-- def fromℕ : ℕ → #{ .just , .nothing } :=
--   ℕ-elim
--     (λ _ → #{ .just , .nothing})
--     { .zero = .nothing , .succ = λ _ _ → .just }

-- def inhabited : ℕ → Type :=
--   ℕ-switch Type { .zero = Void , .succ = Unit}
  
-- def list→maybe : Listₚ ⇒ Maybeₚ :=
--   λ x → ( fromℕ x , λ y → ℕ-elim inhabited ({ .zero = ? , .succ = ? }) x)

--def maybe→list : Maybeₚ ⇒ Listₚ :=
--  λ p⁺ ⇜ p⁻ ⇒
--    let n+ := f p⁺;
--    return n+ ⇜ p⁻ ∘ (absurd (fib Maybeₚ p⁺))

-- def maybe→list : Maybeₚ ⇒ Listₚ :=
--   λ x → ( toℕ x , λ y → ? )

--------------------------------------------------------------------------------
-- Examples

def nat-list : List ℕ := Cons ℕ 0 (Cons ℕ 1 (Nil ℕ))
-- #normalize nat-list
