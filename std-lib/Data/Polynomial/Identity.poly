import Data::Polynomial

--------------------------------------------------------------------------------

def Identityₚ : Poly := Σ (_ : Unit), y^Unit

-- | The Functor interpretation of 'Identityₚ'
def Identity : Type → Type := ofP Identityₚ

-- | 'Identity' Data Constructor
def mk-identity : Π(A : Type), A → Identity A :=
  λ A a → ( .unit , λ _ → a )

--------------------------------------------------------------------------------

-- | The map operation for the 'Identity' Functor
def map-identity : Π(A B : Type), (A → B) → Identity A → Identity B :=
  λ A B f → mapₚ Identityₚ A B f

--------------------------------------------------------------------------------

-- | Non-dependent eliminator for 'Identity'
def run-identity : Π(A : Type), Identity A → A :=
  λ A (_ , f) → f .unit

--------------------------------------------------------------------------------
-- Examples

def nat-identity : Identity ℕ := mk-identity ℕ 42

def forty-two : (run-identity ℕ nat-identity) = 42 := refl
