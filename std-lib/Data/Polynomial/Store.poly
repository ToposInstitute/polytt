import Data::Polynomial

--------------------------------------------------------------------------------

def store : Type → Poly := λ S → S × y^S

def Store : Type → Type → Type := λ S → ofP (store S)

def Store-Comonoid : Type → Comonoid-◁ :=
  λ S → (store S , (λ s → (.unit , λ _ → s), (λ s → ((s, λ s' → s'), λ (s, s') → s'), .promise))) 

def pos : Π (S A : Type), Store S A → S :=
  λ S A (s , _) → s

def peek : Π (S A : Type), S → Store S A → A :=
  λ S A s (s , t) → t s

def peeks : Π (S A : Type), (S → S) → Store S A → A :=
  λ S A f (s , t) → t (f s)

def seek : Π (S A : Type), S → Store S A → Store S A :=
  λ S A s (_ , t) → (s , t)

def seeks : Π (S A : Type), (S → S) → Store S A → Store S A :=
  λ S A f (s , t) → (f s, t)

def experiment : Π (S A : Type), Π (F : Type → Type), (Π (X Y : Type), (X → Y) → F X → F Y) → (S → F S) → Store S A → F A :=
  λ S A F map f st → map S A (λ s → peek S A s st) (f (pos S A st))
